services:
  web:
    image: devibrahima/proevent:latest
    env_file: .env
    restart: always
    user: root
    command: >
      bash -c "mkdir -p /app/staticfiles && chown -R app:app /app/staticfiles && chmod -R 755 /app/staticfiles &&
              python manage.py migrate --noinput &&
              python manage.py collectstatic --noinput &&
              su app -c 'gunicorn config.wsgi:application --bind 0.0.0.0:8080 --workers 2 --threads 2 --timeout 120'"
    depends_on:
      - db
      - redis
    volumes:
      - django_static:/app/staticfiles/
    networks:
      - backend
      - traefik-public
    deploy:
      resources:
        limits:
          memory: 350M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - traefik.enable=true
      - traefik.http.routers.web-http.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.web-http.entrypoints=http
      - traefik.http.routers.web-http.middlewares=https-redirect
      - traefik.http.routers.web-https.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.web-https.entrypoints=https
      - traefik.http.routers.web-https.tls=true
      - traefik.http.routers.web-https.tls.certresolver=le
      - traefik.http.services.web.loadbalancer.server.port=8080
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true

  celery:
    image: devibrahima/proevent:latest
    command: celery -A config worker -B -l info
    depends_on:
      - redis
      - db
    volumes:
      - django_static:/app/staticfiles/
    env_file: .env
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 200M
          cpus: '0.3'
    restart: always

  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file: .env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 250M
          cpus: '0.4'
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 5s
      retries: 3

  redis:
    image: redis:7.0-alpine
    command: ["redis-server", "--port", "6380", "--save", "60", "1", "--loglevel", "warning", "--maxmemory", "100mb", "--maxmemory-policy", "allkeys-lru"]
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 120M
          cpus: '0.2'
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6380", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  traefik:
    image: traefik:v2.10
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certificates:/letsencrypt
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--entrypoints.http.http.redirections.entryPoint.to=https"
      - "--entrypoints.http.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.le.acme.tlschallenge=true"
      - "--certificatesresolvers.le.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--log.level=ERROR"
      - "--accesslog=false"
    networks:
      - traefik-public
    deploy:
      resources:
        limits:
          memory: 80M
          cpus: '0.2'
    restart: always
    labels:
      - "traefik.enable=true"

networks:
  traefik-public:
    external: true
  backend:
    internal: true

volumes:
  django_static:
  postgres_data:
  traefik_certificates: