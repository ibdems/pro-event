Les plateformes de gestion d’événements facilitent l’organisation, la promotion et la gestion de divers types d’événements, qu’il s’agisse de conférences, de concerts, d’ateliers ou de réunions professionnelles. Elles permettent de gérer les inscriptions, les paiements, les confirmations de participation et fournissent des outils pour suivre et analyser l’engagement des participants.

Dans ce challenge, vous allez créer une plateforme web qui permet aux utilisateurs d’organiser et de participer à des événements. Les fonctionnalités incluent la création d'événements, la gestion des inscriptions, le paiement des billets et la visualisation des participants.

Objectif
L’objectif de ce challenge est de tester vos compétences des développeurs en Django sur des aspects tels que :

La conception d’une base de données relationnelle pour gérer les événements, les participants et les inscriptions.

L’utilisation du framework Django pour développer une application web robuste.

La gestion des utilisateurs et des rôles (organisateurs et participants).

La création d’une interface utilisateur qui permet de gérer la création d’événements et les inscriptions.

L’intégration d’un système de paiement pour la réservation des billets.

L’implémentation d’une sécurité solide, y compris l’authentification et les autorisations.

Fonctionnalités attendues (Livrables)
Système d'authentification et gestion des utilisateurs

Inscription et Connexion : Les utilisateurs doivent pouvoir s’inscrire avec un email et un mot de passe.

Rôles des utilisateurs :

Organisateur : Peut créer, gérer et visualiser les événements et les participants.
Participant : Peut s'inscrire et participer aux événements.
Profil utilisateur : Les utilisateurs peuvent mettre à jour leurs informations personnelles (nom, adresse email, photo de profil, etc.).

Gestion des mots de passe : Réinitialisation de mot de passe via email, avec lien sécurisé.

Gestion des événements

Création d'événements :

Les organisateurs peuvent créer des événements avec un titre, une description, une image, un lieu, une date de début et de fin, et le nombre de places disponibles.

Possibilité de définir un prix pour les billets (événements payants).

Modification et suppression d’événements : Les organisateurs peuvent modifier ou supprimer leurs propres événements.

Catégorisation des événements : Les événements peuvent être classés par catégories (Conférences, Ateliers, Concerts, etc.).

Événements publics et privés : Un organisateur peut choisir de rendre un événement public (visible par tout le monde) ou privé (uniquement accessible via une invitation ou un lien privé).

Inscription aux événements

Liste des événements disponibles : Les participants peuvent voir tous les événements à venir dans une liste paginée, avec des filtres par date, catégorie ou lieu.

Détails de l’événement : Une page détaillée de chaque événement avec description, lieu, date, et un bouton pour s'inscrire ou acheter un billet.

Gestion des inscriptions : Les participants peuvent s'inscrire gratuitement ou acheter un billet pour des événements payants.

Confirmation d’inscription : Une fois inscrits, les participants reçoivent un email de confirmation.

Système de paiement

Paiement des événements payants : Intégration avec une plateforme de paiement simulée (comme Stripe ou PayPal Sandbox) pour permettre aux participants de payer pour un billet.

Facture et confirmation de paiement : Après le paiement, un email avec la confirmation du billet acheté est envoyé au participant.

Gestion des participants

Liste des participants : Les organisateurs peuvent voir la liste des personnes inscrites à leurs événements, avec la possibilité de les trier ou de les exporter.
Gestion des billets : Chaque participant reçoit un billet électronique (ou un QR code) qui peut être utilisé pour vérifier leur inscription lors de l’événement.
Vérification des billets : Possibilité d’ajouter un système de vérification de billet via un QR code à l’entrée des événements.
Tableau de bord pour les organisateurs

Suivi des événements : Un tableau de bord qui permet aux organisateurs de suivre les événements qu’ils ont créés, avec des statistiques sur les inscriptions (nombre total d'inscrits, nombre de billets vendus, revenu total).

Gestion des événements : Interface permettant d’ajouter, modifier ou supprimer des événements directement depuis le tableau de bord.

Tests unitaires

Des tests unitaires et des tests d'intégration pour vérifier la fonctionnalité de l’application (création d’événements, inscription, paiement, etc.).
Tests de validation des modèles, vues et formulaires.
Détails techniques
Modèles (Models)

User : Extension du modèle utilisateur Django (via AbstractUser) pour inclure les rôles (organisateur/participant).

Event : Titre, description, date de début, date de fin, lieu, organisateur (FK vers User), capacité, prix, image, statut (public ou privé).

Category : Nom de la catégorie (ex : conférence, atelier, etc.).

Ticket : FK vers User, FK vers Event, type de billet (gratuit ou payant), statut de paiement, QR code pour validation.

Payment : FK vers User, montant payé, date de paiement, référence de transaction.

Vues (Views)

Liste des événements : Affiche la liste paginée des événements, avec filtres et barre de recherche.
Détails de l’événement : Affiche les informations détaillées d’un événement particulier.
Tableau de bord : Interface pour les organisateurs afin de gérer leurs événements et consulter les statistiques.
Formulaire de création/modification d’événement : Utilisé par les organisateurs pour ajouter ou modifier un événement.
Inscription à un événement : Permet à un participant de s’inscrire ou d’acheter un billet.
Gestion des participants : Vue pour les organisateurs pour consulter les inscrits à leurs événements.
Permissions et authentification

Utilisation de LoginRequiredMixin et de PermissionRequiredMixin pour gérer les accès.
Validation que seuls les organisateurs peuvent gérer les événements, et que les participants ne peuvent que s’inscrire aux événements publics.
Validation de la capacité d’inscription (nombre de places disponibles).
Défi supplémentaire
Notification par email

Envoi d'emails automatiques pour confirmer les inscriptions, les paiements, ou rappeler les participants avant l'événement.
Internationalisation (i18n)

Support de plusieurs langues pour rendre la plateforme accessible à une audience internationale.
Support API REST

Implémenter une API pour permettre à des applications tierces (comme des applications mobiles) de gérer les événements, les inscriptions et les paiements.
Mode de vérification des billets (QR code)

Générer un QR code pour chaque billet acheté, avec un système de validation des billets lors de l’entrée à l’événement.
Optimisation de la performance

Mise en cache des événements les plus populaires et optimisation des requêtes pour améliorer la vitesse de chargement.
Critères d'évaluation
Fonctionnalités implémentées : Vérifier que toutes les fonctionnalités principales sont présentes et fonctionnelles.

Qualité du code : Structure du projet, utilisation des conventions Django, organisation des fichiers et clarté du code.

Gestion des erreurs : Validation des données, gestion des exceptions, affichage d’erreurs utilisateur de manière claire et informative.

Sécurité : Authentification et permissions correctement mises en place, protection contre les vulnérabilités courantes (XSS, CSRF, etc.).

Tests : Qualité et couverture des tests unitaires, assurant la fiabilité de l’application.

Expérience utilisateur : Interface claire et intuitive, design responsive, navigation fluide et agréable.

Performance : Optimisation des requêtes et des temps de chargement, utilisation efficace des ressources.

Good luck !