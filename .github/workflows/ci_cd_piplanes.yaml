name: Pipelines CI/CD ProEvent

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

jobs:
  check_syntaxes:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Créer le fichier .env
        run: |
          echo "${{ secrets.ENV_FILE }}" | tr -d '\r' > .env

      - name: Vérifier le fichier .env
        run: cat .env | grep -E '^[A-Z_]+='

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Debug environment variables
        run: env | sort

      - name: Check lint code with flake8
        run: |
          pip install flake8
          flake8 . --max-line-length=100

    # Job 2 : Lancer les tests unitaires
  test:
    runs-on: ubuntu-latest
    needs: check_syntaxe  # Le job "test" dépend du succès de "check_syntaxe"
    services:
      postgres:  # Configurer un service PostgreSQL pour les tests
        image: postgres:15.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgre
          POSTGRES_DB: task_test
        ports:
          - 5432:5432  # Port exposé
    steps:
      # Étape 1 : Télécharger le code source
      - uses: actions/checkout@v2

      # Étape 2 : Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      # Étape 3 : Installer les dépendances nécessaires pour les tests
      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      # Étape 4 : Exécuter les tests unitaires
      - name: Run tests
        run: |
          pytest test
